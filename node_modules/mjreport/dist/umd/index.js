(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.MjReport = {}));
}(this, function (exports) { 'use strict';

    (function (PaperType) {
        PaperType[PaperType["A4_Portrait"] = 0] = "A4_Portrait";
        PaperType[PaperType["A5_Portrait"] = 1] = "A5_Portrait";
        PaperType[PaperType["A4_Landscape"] = 2] = "A4_Landscape";
        PaperType[PaperType["A5_Landscape"] = 3] = "A5_Landscape";
    })(exports.PaperType || (exports.PaperType = {}));
    (function (PaperType) {
        function getDimension(type) {
            switch (type) {
                case PaperType.A4_Portrait:
                    return { height: 297, width: 210 };
                case PaperType.A5_Portrait:
                    return { height: 210, width: 148 };
                case PaperType.A4_Landscape:
                    return { height: 210, width: 297 };
                case PaperType.A5_Landscape:
                    return { height: 148, width: 210 };
            }
        }
        PaperType.getDimension = getDimension;
        function getRule(type) {
            switch (type) {
                case PaperType.A4_Portrait:
                    return 'a4 portrait';
                case PaperType.A5_Portrait:
                    return 'a5 portrait';
                case PaperType.A4_Landscape:
                    return 'a4 landscape';
                case PaperType.A5_Landscape:
                    return 'a5 landscape';
            }
        }
        PaperType.getRule = getRule;
        function getSize(type) {
            switch (type) {
                case PaperType.A4_Portrait:
                    return { pageSize: 'A4', landscape: false };
                case PaperType.A5_Portrait:
                    return { pageSize: 'A5', landscape: false };
                case PaperType.A4_Landscape:
                    return { pageSize: 'A4', landscape: true };
                case PaperType.A5_Landscape:
                    return { pageSize: 'A5', landscape: true };
            }
        }
        PaperType.getSize = getSize;
        function getStyle(type) {
            return "@page{ size: " + PaperType.getRule(type) + "; margin: 0;}";
        }
        PaperType.getStyle = getStyle;
    })(exports.PaperType || (exports.PaperType = {}));

    var Tags;
    (function (Tags) {
        Tags[Tags["Text"] = 0] = "Text";
        Tags[Tags["Heading"] = 1] = "Heading";
        Tags[Tags["Table"] = 2] = "Table";
        Tags[Tags["PageBreak"] = 3] = "PageBreak";
    })(Tags || (Tags = {}));
    (function (HeadingLevel) {
        HeadingLevel["H1"] = "h1";
        HeadingLevel["H2"] = "h2";
        HeadingLevel["H3"] = "h3";
        HeadingLevel["H4"] = "h4";
        HeadingLevel["H5"] = "h5";
        HeadingLevel["H6"] = "h6";
    })(exports.HeadingLevel || (exports.HeadingLevel = {}));
    var TableReservedField;
    (function (TableReservedField) {
        TableReservedField["index"] = "index";
        TableReservedField["row"] = "row";
        TableReservedField["empty"] = "empty";
    })(TableReservedField || (TableReservedField = {}));
    var TableCellType;
    (function (TableCellType) {
        TableCellType["Header"] = "th";
        TableCellType["Body"] = "td";
    })(TableCellType || (TableCellType = {}));
    function isTableCell(obj) {
        return Array.isArray(obj) && typeof obj[0] === 'object';
    }
    function isTableField(obj) {
        return !Array.isArray(obj) && typeof obj === 'function';
    }
    var DefaultStyles = "\nbody {\n  background: rgb(204,204,204); \n}\n\npage {\n  background: white;\n  margin: 0 auto;\n  margin-bottom: 0.5cm;\n  box-shadow: 0 0 0.5cm rgba(0,0,0,0.5);\n  display: flex;\n  flex-direction: column;\n}\n\npage[type=\"A4_Portrait\"] {\n  width: 210mm;\n  height: 297mm;\n}\n\npage[type=\"A4_Landscape\"] {\n  width: 297mm;\n  height: 210mm;\n}\n\npage[type=\"A5_Portrait\"] {\n  width: 148mm;\n  height: 210mm;\n}\n\npage[type=\"A5_Landscape\"] {\n  width: 210mm;\n  height: 148mm;\n}\n\n@media print {\n  .no-print {\n    display: none;\n  } \n  \n  body, page {\n    margin: 0;\n    box-shadow: none;\n  }\n}\n\n.header_section {\n  margin-top: 10px;\n  margin-left: 5px;\n  margin-right: 5px;\n  flex-shrink: 0;\n  position: relative;\n}\n\n.content_section {\n  margin-left: 5px;\n  margin-right: 5px;\n  height: 100%;\n  overflow: hidden;\n}\n\n.footer_section {\n  margin-bottom: 5px;\n  margin-left: 5px;\n  margin-right: 5px;\n  flex-shrink: 0;\n  overflow: hidden;\n  position: relative;\n}\n\n.basic_tbl {\n  border: 1px solid black;\n  border-collapse: collapse;\n  margin: auto;\n  padding:5px;\n  width: 80%;\n}\n\n.basic_tbl th {\n  border-bottom: 2px solid black;\n  border-right: 1px solid black;\n  font-size: 20px;\n  font-weight: 600;\n  padding: 5px;\n  vertical-align: middle;\n}\n\n.basic_tbl tr {\n  border-top: 1px solid black;\n  border-bottom: 1px solid black;\n}\n\n.basic_tbl tr:hover td {\n  background:rgb(219, 222, 255);\n}\n\n.basic_tbl tr:nth-child(odd) td {\n  background:#EBEBEB;\n}\n\n.basic_tbl tr:nth-child(odd):hover td {\n  background:rgb(219, 222, 255);\n}\n\n.basic_tbl td {\n  font-size:18px;\n  vertical-align:middle;\n  padding:8px;\n  border-right: 1px solid black;\n  border-left: 1px solid black;\n} \n\n.rtl {\n  direction: rtl;\n}\n\n.ltr {\n  direction: ltr;\n}\n\n.text-left {\n  text-align: left;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-right {\n  text-align: right;\n}\n";

    var Generator = (function () {
        function Generator(title, paperType) {
            if (title === void 0) { title = 'MJ-Report Print Preview'; }
            if (paperType === void 0) { paperType = exports.PaperType.A4_Portrait; }
            this.title = title;
            this.paperType = paperType;
            this.style = '';
            this.headCss = [];
            this.content = [];
            this.header = [];
            this.footer = [];
        }
        Generator.prototype.setStyle = function (rawCss) {
            this.style = rawCss;
        };
        Generator.prototype.addCss = function (link) {
            this.headCss.push(link);
        };
        Generator.prototype.addText = function (text, className, idName) {
            return { tag: Tags.Text, value: { text: text }, className: className, idName: idName };
        };
        Generator.prototype.addHeading = function (text, level, className, idName) {
            if (level === void 0) { level = exports.HeadingLevel.H1; }
            return { tag: Tags.Heading, value: { text: text, level: level }, className: className, idName: idName };
        };
        Generator.prototype.addPageBreak = function () {
            return { tag: Tags.PageBreak };
        };
        Generator.prototype.addTable = function (value, className, idName) {
            return { tag: Tags.Table, value: value, className: className, idName: idName };
        };
        Generator.prototype.setContent = function (elements) {
            this.content = elements;
        };
        Generator.prototype.setHeader = function (elements) {
            this.header = elements;
        };
        Generator.prototype.setFooter = function (elements) {
            this.footer = elements;
        };
        Generator.prototype.generate = function () {
            var metaData = {
                title: this.title,
                css: this.headCss,
                paperType: this.paperType,
                style: this.style
            };
            var data = {
                metaData: metaData,
                header: this.header,
                footer: this.footer,
                content: this.content,
            };
            return data;
        };
        return Generator;
    }());

    var Renderer = (function () {
        function Renderer(data, rootElementName) {
            if (rootElementName === void 0) { rootElementName = 'mjRoot'; }
            this.data = data;
            this.rootElementName = rootElementName;
            this.pageNumber = 0;
            this.currentPage = null;
            this.rootElement = null;
        }
        Renderer.prototype.createDomElement = function (elementName, className, idName) {
            var el = document.createElement(elementName);
            if (idName)
                el.id = idName;
            if (className)
                el.className = className;
            return el;
        };
        Renderer.prototype.loadHead = function () {
            var _this = this;
            var _a;
            document.title = this.data.metaData.title || 'Mj Reporter';
            var style = this.createDomElement('style');
            style.innerHTML = DefaultStyles + " " + this.data.metaData.style + " " + exports.PaperType.getStyle(this.data.metaData.paperType);
            document.head.append(style);
            var metaDataCss = this.data.metaData.css || [];
            var links = metaDataCss.map(function (link) {
                var l = _this.createDomElement('link');
                l.setAttribute('rel', 'stylesheet');
                l.setAttribute('href', link);
                return l;
            });
            (_a = document.head).append.apply(_a, links);
        };
        Renderer.prototype.addPageSections = function (page) {
            var header = this.createDomElement('div', 'header_section', "header_" + this.pageNumber);
            page.append(header);
            var content = this.createDomElement('div', 'content_section', "content_" + this.pageNumber);
            page.append(content);
            var footer = this.createDomElement('div', 'footer_section', "footer_" + this.pageNumber);
            page.append(footer);
            return { header: header, content: content, footer: footer };
        };
        Renderer.prototype.createNewPage = function () {
            this.pageNumber += 1;
            var page = this.createDomElement('page', 'page_section', "page_" + this.pageNumber);
            page.setAttribute('type', "" + exports.PaperType[this.data.metaData.paperType]);
            this.rootElement.append(page);
            this.currentPage = this.addPageSections(page);
            this.createElements(this.data.header, this.currentPage.header, false);
            this.createElements(this.data.footer, this.currentPage.footer, false);
        };
        Renderer.prototype.addElement = function (el, parent, noOverlap, state) {
            if (parent === void 0) { parent = this.currentPage.content; }
            if (noOverlap === void 0) { noOverlap = true; }
            if (state) {
                parent = state.body;
            }
            parent.append(el);
            if (noOverlap) {
                var elementBottom = el.getBoundingClientRect().bottom;
                var footerTop = Math.ceil(this.currentPage.footer.getBoundingClientRect().top) + 2;
                if (footerTop < elementBottom) {
                    parent.removeChild(el);
                    this.createNewPage();
                    parent = this.currentPage.content;
                    if (state) {
                        state.table = this.createDomElement(state.element.name, state.element.className, state.element.idName);
                        state.body = this.createDomElement('tbody');
                        state.table.append(state.header.cloneNode(true));
                        state.table.append(state.body);
                        this.addElement(state.table);
                        parent = state.body;
                    }
                    parent.append(el);
                }
            }
        };
        Renderer.prototype.createTableRow = function (rowData, cellType) {
            if (cellType === void 0) { cellType = TableCellType.Body; }
            var isString = !isTableCell(rowData);
            var row = this.createDomElement('tr');
            for (var _i = 0, rowData_1 = rowData; _i < rowData_1.length; _i++) {
                var data = rowData_1[_i];
                var cell = null;
                var cellData = null;
                if (isString) {
                    cellData = data;
                    cell = this.createDomElement(cellType);
                    cell.innerHTML = cellData;
                }
                else {
                    cellData = data;
                    cell = this.createDomElement(cellType, cellData.className, cellData.idName);
                    cell.setAttribute('style', cellData.style);
                    cell.innerHTML = cellData.value;
                }
                row.append(cell);
            }
            return row;
        };
        Renderer.prototype.getTableField = function (item, fields, opt) {
            if (!isTableCell(fields)) {
                var data = [];
                for (var _i = 0, _a = fields; _i < _a.length; _i++) {
                    var field = _a[_i];
                    if (item[field]) {
                        data.push(item[field]);
                    }
                    else if (field.includes('@')) {
                        for (var i in TableReservedField) {
                            if (field === "@" + TableReservedField[i]) {
                                data.push(opt[TableReservedField[i]]);
                                break;
                            }
                        }
                    }
                    else {
                        data.push(field);
                    }
                }
                return data;
            }
            else {
                var data = [];
                for (var _b = 0, _c = fields; _b < _c.length; _b++) {
                    var field = _c[_b];
                    var f = Object.create(field);
                    if (item[field.value]) {
                        f.value = item[field.value];
                        data.push(f);
                    }
                    else if (field.value.includes('@')) {
                        for (var i in TableReservedField) {
                            if (field.value === "@" + TableReservedField[i]) {
                                f.value = opt[TableReservedField[i]];
                                data.push(f);
                                break;
                            }
                        }
                    }
                    else {
                        data.push(field);
                    }
                }
                return data;
            }
        };
        Renderer.prototype.createTable = function (element) {
            var _this = this;
            var state = {
                element: { name: 'table', className: element.className, idName: element.idName },
                header: {},
                body: {},
                table: {},
            };
            state.table = this.createDomElement('table', element.className, element.idName);
            var value = element.value;
            if (value.header) {
                state.header = this.createDomElement('thead');
                state.header.append(this.createTableRow(value.header, TableCellType.Header));
                state.table.append(state.header);
            }
            state.body = this.createDomElement('tbody');
            state.table.append(state.body);
            this.addElement(state.table);
            value.items.forEach(function (item, index) {
                var opt = { index: index, row: index + 1, empty: '' };
                var row = null;
                if (isTableField(value.fields)) {
                    var cb = value.fields;
                    row = _this.createTableRow(cb(item, opt));
                }
                else {
                    row = _this.createTableRow(_this.getTableField(item, value.fields, opt));
                }
                _this.addElement(row, null, true, state);
            });
            if (value.footer) {
                for (var _i = 0, _a = value.footer; _i < _a.length; _i++) {
                    var r = _a[_i];
                    this.addElement(this.createTableRow(r), null, true, state);
                }
            }
        };
        Renderer.prototype.createElement = function (element, parent, noOverlap) {
            if (noOverlap === void 0) { noOverlap = true; }
            var el = null;
            var value = null;
            switch (element.tag) {
                case Tags.PageBreak:
                    this.createNewPage();
                    break;
                case Tags.Text:
                    value = element.value;
                    el = this.createDomElement('p', element.className, element.idName);
                    el.innerHTML = value.text;
                    this.addElement(el, parent, noOverlap);
                    break;
                case Tags.Heading:
                    value = element.value;
                    el = this.createDomElement(value.level, element.className, element.idName);
                    el.innerHTML = value.text;
                    this.addElement(el, parent, noOverlap);
                    break;
                case Tags.Table:
                    this.createTable(element);
                    break;
            }
            return el;
        };
        Renderer.prototype.createElements = function (elements, parent, noOverlap) {
            if (noOverlap === void 0) { noOverlap = true; }
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var element = elements_1[_i];
                this.createElement(element, parent, noOverlap);
            }
        };
        Renderer.prototype.draw = function () {
            this.loadHead();
            this.rootElement = document.getElementById(this.rootElementName);
            this.createNewPage();
            this.createElements(this.data.content);
            console.log('Report Rendered ;-)');
        };
        return Renderer;
    }());

    exports.Generator = Generator;
    exports.Renderer = Renderer;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
