import { Tags, DefaultStyles, isTableCell, TableCellType, isTableField, TableReservedField } from './Common';
import { PaperType } from './PaperType';
var Renderer = (function () {
    function Renderer(data, rootElementName) {
        if (rootElementName === void 0) { rootElementName = 'mjRoot'; }
        this.data = data;
        this.rootElementName = rootElementName;
        this.pageNumber = 0;
        this.currentPage = null;
        this.rootElement = null;
    }
    Renderer.prototype.createDomElement = function (elementName, className, idName) {
        var el = document.createElement(elementName);
        if (idName)
            el.id = idName;
        if (className)
            el.className = className;
        return el;
    };
    Renderer.prototype.loadHead = function () {
        var _this = this;
        var _a;
        document.title = this.data.metaData.title || 'Mj Reporter';
        var style = this.createDomElement('style');
        style.innerHTML = DefaultStyles + " " + this.data.metaData.style + " " + PaperType.getStyle(this.data.metaData.paperType);
        document.head.append(style);
        var metaDataCss = this.data.metaData.css || [];
        var links = metaDataCss.map(function (link) {
            var l = _this.createDomElement('link');
            l.setAttribute('rel', 'stylesheet');
            l.setAttribute('href', link);
            return l;
        });
        (_a = document.head).append.apply(_a, links);
    };
    Renderer.prototype.addPageSections = function (page) {
        var header = this.createDomElement('div', 'header_section', "header_" + this.pageNumber);
        page.append(header);
        var content = this.createDomElement('div', 'content_section', "content_" + this.pageNumber);
        page.append(content);
        var footer = this.createDomElement('div', 'footer_section', "footer_" + this.pageNumber);
        page.append(footer);
        return { header: header, content: content, footer: footer };
    };
    Renderer.prototype.createNewPage = function () {
        this.pageNumber += 1;
        var page = this.createDomElement('page', 'page_section', "page_" + this.pageNumber);
        page.setAttribute('type', "" + PaperType[this.data.metaData.paperType]);
        this.rootElement.append(page);
        this.currentPage = this.addPageSections(page);
        this.createElements(this.data.header, this.currentPage.header, false);
        this.createElements(this.data.footer, this.currentPage.footer, false);
    };
    Renderer.prototype.addElement = function (el, parent, noOverlap, state) {
        if (parent === void 0) { parent = this.currentPage.content; }
        if (noOverlap === void 0) { noOverlap = true; }
        if (state) {
            parent = state.body;
        }
        parent.append(el);
        if (noOverlap) {
            var elementBottom = el.getBoundingClientRect().bottom;
            var footerTop = Math.ceil(this.currentPage.footer.getBoundingClientRect().top) + 2;
            if (footerTop < elementBottom) {
                parent.removeChild(el);
                this.createNewPage();
                parent = this.currentPage.content;
                if (state) {
                    state.table = this.createDomElement(state.element.name, state.element.className, state.element.idName);
                    state.body = this.createDomElement('tbody');
                    state.table.append(state.header.cloneNode(true));
                    state.table.append(state.body);
                    this.addElement(state.table);
                    parent = state.body;
                }
                parent.append(el);
            }
        }
    };
    Renderer.prototype.createTableRow = function (rowData, cellType) {
        if (cellType === void 0) { cellType = TableCellType.Body; }
        var isString = !isTableCell(rowData);
        var row = this.createDomElement('tr');
        for (var _i = 0, rowData_1 = rowData; _i < rowData_1.length; _i++) {
            var data = rowData_1[_i];
            var cell = null;
            var cellData = null;
            if (isString) {
                cellData = data;
                cell = this.createDomElement(cellType);
                cell.innerHTML = cellData;
            }
            else {
                cellData = data;
                cell = this.createDomElement(cellType, cellData.className, cellData.idName);
                cell.setAttribute('style', cellData.style);
                cell.innerHTML = cellData.value;
            }
            row.append(cell);
        }
        return row;
    };
    Renderer.prototype.getTableField = function (item, fields, opt) {
        if (!isTableCell(fields)) {
            var data = [];
            for (var _i = 0, _a = fields; _i < _a.length; _i++) {
                var field = _a[_i];
                if (item[field]) {
                    data.push(item[field]);
                }
                else if (field.includes('@')) {
                    for (var i in TableReservedField) {
                        if (field === "@" + TableReservedField[i]) {
                            data.push(opt[TableReservedField[i]]);
                            break;
                        }
                    }
                }
                else {
                    data.push(field);
                }
            }
            return data;
        }
        else {
            var data = [];
            for (var _b = 0, _c = fields; _b < _c.length; _b++) {
                var field = _c[_b];
                var f = Object.create(field);
                if (item[field.value]) {
                    f.value = item[field.value];
                    data.push(f);
                }
                else if (field.value.includes('@')) {
                    for (var i in TableReservedField) {
                        if (field.value === "@" + TableReservedField[i]) {
                            f.value = opt[TableReservedField[i]];
                            data.push(f);
                            break;
                        }
                    }
                }
                else {
                    data.push(field);
                }
            }
            return data;
        }
    };
    Renderer.prototype.createTable = function (element) {
        var _this = this;
        var state = {
            element: { name: 'table', className: element.className, idName: element.idName },
            header: {},
            body: {},
            table: {},
        };
        state.table = this.createDomElement('table', element.className, element.idName);
        var value = element.value;
        if (value.header) {
            state.header = this.createDomElement('thead');
            state.header.append(this.createTableRow(value.header, TableCellType.Header));
            state.table.append(state.header);
        }
        state.body = this.createDomElement('tbody');
        state.table.append(state.body);
        this.addElement(state.table);
        value.items.forEach(function (item, index) {
            var opt = { index: index, row: index + 1, empty: '' };
            var row = null;
            if (isTableField(value.fields)) {
                var cb = value.fields;
                row = _this.createTableRow(cb(item, opt));
            }
            else {
                row = _this.createTableRow(_this.getTableField(item, value.fields, opt));
            }
            _this.addElement(row, null, true, state);
        });
        if (value.footer) {
            for (var _i = 0, _a = value.footer; _i < _a.length; _i++) {
                var r = _a[_i];
                this.addElement(this.createTableRow(r), null, true, state);
            }
        }
    };
    Renderer.prototype.createElement = function (element, parent, noOverlap) {
        if (noOverlap === void 0) { noOverlap = true; }
        var el = null;
        var value = null;
        switch (element.tag) {
            case Tags.PageBreak:
                this.createNewPage();
                break;
            case Tags.Text:
                value = element.value;
                el = this.createDomElement('p', element.className, element.idName);
                el.innerHTML = value.text;
                this.addElement(el, parent, noOverlap);
                break;
            case Tags.Heading:
                value = element.value;
                el = this.createDomElement(value.level, element.className, element.idName);
                el.innerHTML = value.text;
                this.addElement(el, parent, noOverlap);
                break;
            case Tags.Table:
                this.createTable(element);
                break;
        }
        return el;
    };
    Renderer.prototype.createElements = function (elements, parent, noOverlap) {
        if (noOverlap === void 0) { noOverlap = true; }
        for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
            var element = elements_1[_i];
            this.createElement(element, parent, noOverlap);
        }
    };
    Renderer.prototype.draw = function () {
        this.loadHead();
        this.rootElement = document.getElementById(this.rootElementName);
        this.createNewPage();
        this.createElements(this.data.content);
        console.log('Report Rendered ;-)');
    };
    return Renderer;
}());
export { Renderer };
